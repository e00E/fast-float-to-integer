fast_float_to_integer::f32_to_i128:
	push ebp
	push ebx
	push edi
	push esi
	sub esp, 44
	movss xmm0, dword ptr [esp + 68]
	mov esi, dword ptr [esp + 64]
	call .L_0$pb
.L_0$pb:
	pop ebx
	lea eax, [esp + 16]
.L_1:
	add ebx, offset _GLOBAL_OFFSET_TABLE_+(.L_1-.L_0$pb)
	mov dword ptr [esp], eax
	movss dword ptr [esp + 4], xmm0
	call __fixsfti@PLT
	sub esp, 4
	movss xmm0, dword ptr [esp + 68]
	xor ecx, ecx
	mov eax, dword ptr [esp + 16]
	mov edx, dword ptr [esp + 20]
	mov edi, dword ptr [esp + 24]
	mov ebp, -2147483648
	ucomiss xmm0, dword ptr [ebx + .L_2@GOTOFF]
	cmovb eax, ecx
	cmovb edx, ecx
	cmovb edi, ecx
	cmovae ebp, dword ptr [esp + 28]
	ucomiss xmm0, dword ptr [ebx + .L_3@GOTOFF]
	mov ebx, 2147483647
	cmovbe ebx, ebp
	mov ebp, -1
	cmova edi, ebp
	cmova edx, ebp
	cmova eax, ebp
	ucomiss xmm0, xmm0
	cmovp ebx, ecx
	cmovp eax, ecx
	cmovp edx, ecx
	cmovp edi, ecx
	mov dword ptr [esi + 12], ebx
	mov dword ptr [esi + 8], edi
	mov dword ptr [esi + 4], edx
	mov dword ptr [esi], eax
	mov eax, esi
	add esp, 44
	pop esi
	pop edi
	pop ebx
	pop ebp
	ret 4
