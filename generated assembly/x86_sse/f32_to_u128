fast_float_to_integer::f32_to_u128:
	push ebx
	push edi
	push esi
	sub esp, 32
	movss xmm0, dword ptr [esp + 52]
	mov esi, dword ptr [esp + 48]
	call .L_0$pb
.L_0$pb:
	pop ebx
	lea eax, [esp + 16]
.L_1:
	add ebx, offset _GLOBAL_OFFSET_TABLE_+(.L_1-.L_0$pb)
	mov dword ptr [esp], eax
	movss dword ptr [esp + 4], xmm0
	call __fixunssfti@PLT
	sub esp, 4
	movss xmm1, dword ptr [esp + 52]
	xorps xmm0, xmm0
	xor eax, eax
	mov ecx, 0
	mov edx, 0
	mov edi, 0
	ucomiss xmm1, xmm0
	movaps xmm0, xmm1
	jb .L_2
	mov eax, dword ptr [esp + 28]
	mov ecx, dword ptr [esp + 24]
	mov edx, dword ptr [esp + 20]
	mov edi, dword ptr [esp + 16]
.L_2:
	ucomiss xmm0, dword ptr [ebx + .L_3@GOTOFF]
	mov ebx, -1
	cmova eax, ebx
	cmova edi, ebx
	cmova edx, ebx
	cmova ecx, ebx
	mov dword ptr [esi + 12], eax
	mov dword ptr [esi + 8], ecx
	mov dword ptr [esi + 4], edx
	mov dword ptr [esi], edi
	mov eax, esi
	add esp, 32
	pop esi
	pop edi
	pop ebx
	ret 4
